!function(e){function n(n){for(var t,o,a=n[0],s=n[1],i=0,l=[];i<a.length;i++)o=a[i],Object.prototype.hasOwnProperty.call(r,o)&&r[o]&&l.push(r[o][0]),r[o]=0;for(t in s)Object.prototype.hasOwnProperty.call(s,t)&&(e[t]=s[t]);for(d&&d(n);l.length;)l.shift()()}var t={},r={0:0};var o={};var a={7:function(){return{"./index_bg.js":{__wbindgen_object_drop_ref:function(e){return t[5].exports.G(e)},__wbindgen_cb_drop:function(e){return t[5].exports.z(e)},__wbindgen_string_new:function(e,n){return t[5].exports.I(e,n)},__wbindgen_number_new:function(e){return t[5].exports.E(e)},__wbg_instanceof_Window_9c4fd26090e1d029:function(e){return t[5].exports.n(e)},__wbg_document_249e9cf340780f93:function(e){return t[5].exports.d(e)},__wbg_requestAnimationFrame_aa3bab1f9557a4da:function(e,n){return t[5].exports.s(e,n)},__wbg_getElementById_2ee254bbb67b6ae1:function(e,n,r){return t[5].exports.g(e,n,r)},__wbg_instanceof_HtmlCanvasElement_e0e251da2aa0b541:function(e){return t[5].exports.l(e)},__wbg_width_5843e31ec081f978:function(e){return t[5].exports.x(e)},__wbg_height_872c06b1bc666dd9:function(e){return t[5].exports.j(e)},__wbg_getContext_d778ffc8203f64ae:function(e,n,r){return t[5].exports.f(e,n,r)},__wbg_addEventListener_b334b84e6525699c:function(e,n,r,o){return t[5].exports.a(e,n,r,o)},__wbg_log_386a8115a84a780d:function(e){return t[5].exports.p(e)},__wbg_log_da824bc9fb9da0a8:function(e,n){return t[5].exports.q(e,n)},__wbg_instanceof_CanvasRenderingContext2d_eea9cd931eb496b7:function(e){return t[5].exports.k(e)},__wbg_canvas_bad8476e752d1c6c:function(e){return t[5].exports.c(e)},__wbg_setfillStyle_5306396b0368ba08:function(e,n){return t[5].exports.u(e,n)},__wbg_fillRect_33b210367d4a0063:function(e,n,r,o,a){return t[5].exports.e(e,n,r,o,a)},__wbg_instanceof_HtmlTextAreaElement_aefe0cf650ce9a0c:function(e){return t[5].exports.m(e)},__wbg_value_ad57e46044f59979:function(e,n){return t[5].exports.w(e,n)},__wbg_setvalue_790f4e4951947e33:function(e,n,r){return t[5].exports.v(e,n,r)},__wbg_key_97a48109ce6890c4:function(e,n){return t[5].exports.o(e,n)},__wbg_call_cb478d88f3068c91:function(e,n){return t[5].exports.b(e,n)},__wbindgen_object_clone_ref:function(e){return t[5].exports.F(e)},__wbg_newnoargs_3efc7bfa69a681f9:function(e,n){return t[5].exports.r(e,n)},__wbg_self_05c54dcacb623b9a:function(){return t[5].exports.t()},__wbg_window_9777ce446d12989f:function(){return t[5].exports.y()},__wbg_globalThis_f0ca0bbb0149cf3d:function(){return t[5].exports.h()},__wbg_global_c3c8325ae8c7f1a9:function(){return t[5].exports.i()},__wbindgen_is_undefined:function(e){return t[5].exports.D(e)},__wbindgen_debug_string:function(e,n){return t[5].exports.C(e,n)},__wbindgen_throw:function(e,n){return t[5].exports.J(e,n)},__wbindgen_rethrow:function(e){return t[5].exports.H(e)},__wbindgen_closure_wrapper63:function(e,n,r){return t[5].exports.A(e,n,r)},__wbindgen_closure_wrapper65:function(e,n,r){return t[5].exports.B(e,n,r)}}}}};function s(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.e=function(e){var n=[],t=r[e];if(0!==t)if(t)n.push(t[2]);else{var i=new Promise((function(n,o){t=r[e]=[n,o]}));n.push(t[2]=i);var l,c=document.createElement("script");c.charset="utf-8",c.timeout=120,s.nc&&c.setAttribute("nonce",s.nc),c.src=function(e){return s.p+""+e+".index.js"}(e);var d=new Error;l=function(n){c.onerror=c.onload=null,clearTimeout(u);var t=r[e];if(0!==t){if(t){var o=n&&("load"===n.type?"missing":n.type),a=n&&n.target&&n.target.src;d.message="Loading chunk "+e+" failed.\n("+o+": "+a+")",d.name="ChunkLoadError",d.type=o,d.request=a,t[1](d)}r[e]=void 0}};var u=setTimeout((function(){l({type:"timeout",target:c})}),12e4);c.onerror=c.onload=l,document.head.appendChild(c)}return({2:[7]}[e]||[]).forEach((function(e){var t=o[e];if(t)n.push(t);else{var r,i=a[e](),l=fetch(s.p+""+{7:"07c2736b10c2a049f182"}[e]+".module.wasm");if(i instanceof Promise&&"function"==typeof WebAssembly.compileStreaming)r=Promise.all([WebAssembly.compileStreaming(l),i]).then((function(e){return WebAssembly.instantiate(e[0],e[1])}));else if("function"==typeof WebAssembly.instantiateStreaming)r=WebAssembly.instantiateStreaming(l,i);else{r=l.then((function(e){return e.arrayBuffer()})).then((function(e){return WebAssembly.instantiate(e,i)}))}n.push(o[e]=r.then((function(n){return s.w[e]=(n.instance||n).exports})))}})),Promise.all(n)},s.m=e,s.c=t,s.d=function(e,n,t){s.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,n){if(1&n&&(e=s(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(s.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)s.d(t,r,function(n){return e[n]}.bind(null,r));return t},s.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(n,"a",n),n},s.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},s.p="",s.oe=function(e){throw console.error(e),e},s.w={};var i=window.webpackJsonp=window.webpackJsonp||[],l=i.push.bind(i);i.push=n,i=i.slice();for(var c=0;c<i.length;c++)n(i[c]);var d=l;s(s.s=4)}([function(e,n){function t(e){return e instanceof Map?e.clear=e.delete=e.set=function(){throw new Error("map is read-only")}:e instanceof Set&&(e.add=e.clear=e.delete=function(){throw new Error("set is read-only")}),Object.freeze(e),Object.getOwnPropertyNames(e).forEach((function(n){var r=e[n];"object"!=typeof r||Object.isFrozen(r)||t(r)})),e}var r=t,o=t;r.default=o;class a{constructor(e){void 0===e.data&&(e.data={}),this.data=e.data,this.isMatchIgnored=!1}ignoreMatch(){this.isMatchIgnored=!0}}function s(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;")}function i(e,...n){const t=Object.create(null);for(const n in e)t[n]=e[n];return n.forEach((function(e){for(const n in e)t[n]=e[n]})),t}const l=e=>!!e.kind;class c{constructor(e,n){this.buffer="",this.classPrefix=n.classPrefix,e.walk(this)}addText(e){this.buffer+=s(e)}openNode(e){if(!l(e))return;let n=e.kind;e.sublanguage||(n=`${this.classPrefix}${n}`),this.span(n)}closeNode(e){l(e)&&(this.buffer+="</span>")}value(){return this.buffer}span(e){this.buffer+=`<span class="${e}">`}}class d{constructor(){this.rootNode={children:[]},this.stack=[this.rootNode]}get top(){return this.stack[this.stack.length-1]}get root(){return this.rootNode}add(e){this.top.children.push(e)}openNode(e){const n={kind:e,children:[]};this.add(n),this.stack.push(n)}closeNode(){if(this.stack.length>1)return this.stack.pop()}closeAllNodes(){for(;this.closeNode(););}toJSON(){return JSON.stringify(this.rootNode,null,4)}walk(e){return this.constructor._walk(e,this.rootNode)}static _walk(e,n){return"string"==typeof n?e.addText(n):n.children&&(e.openNode(n),n.children.forEach(n=>this._walk(e,n)),e.closeNode(n)),e}static _collapse(e){"string"!=typeof e&&e.children&&(e.children.every(e=>"string"==typeof e)?e.children=[e.children.join("")]:e.children.forEach(e=>{d._collapse(e)}))}}class u extends d{constructor(e){super(),this.options=e}addKeyword(e,n){""!==e&&(this.openNode(n),this.addText(e),this.closeNode())}addText(e){""!==e&&this.add(e)}addSublanguage(e,n){const t=e.root;t.kind=n,t.sublanguage=!0,this.add(t)}toHTML(){return new c(this,this.options).value()}finalize(){return!0}}function h(e){return e?"string"==typeof e?e:e.source:null}const f=/\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;const p="(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)",b={begin:"\\\\[\\s\\S]",relevance:0},g={className:"string",begin:"'",end:"'",illegal:"\\n",contains:[b]},$={className:"string",begin:'"',end:'"',illegal:"\\n",contains:[b]},m={begin:/\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/},_=function(e,n,t={}){const r=i({className:"comment",begin:e,end:n,contains:[]},t);return r.contains.push(m),r.contains.push({className:"doctag",begin:"(?:TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):",relevance:0}),r},y=_("//","$"),w=_("/\\*","\\*/"),v=_("#","$"),x={className:"number",begin:"\\b\\d+(\\.\\d+)?",relevance:0},k={className:"number",begin:p,relevance:0},E={className:"number",begin:"\\b(0b[01]+)",relevance:0},T={className:"number",begin:"\\b\\d+(\\.\\d+)?(%|em|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc|px|deg|grad|rad|turn|s|ms|Hz|kHz|dpi|dpcm|dppx)?",relevance:0},R={begin:/(?=\/[^/\n]*\/)/,contains:[{className:"regexp",begin:/\//,end:/\/[gimuy]*/,illegal:/\n/,contains:[b,{begin:/\[/,end:/\]/,relevance:0,contains:[b]}]}]},C={className:"title",begin:"[a-zA-Z]\\w*",relevance:0},A={className:"title",begin:"[a-zA-Z_]\\w*",relevance:0},N={begin:"\\.\\s*[a-zA-Z_]\\w*",relevance:0};var M=Object.freeze({__proto__:null,MATCH_NOTHING_RE:/\b\B/,IDENT_RE:"[a-zA-Z]\\w*",UNDERSCORE_IDENT_RE:"[a-zA-Z_]\\w*",NUMBER_RE:"\\b\\d+(\\.\\d+)?",C_NUMBER_RE:p,BINARY_NUMBER_RE:"\\b(0b[01]+)",RE_STARTERS_RE:"!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~",SHEBANG:(e={})=>{const n=/^#![ ]*\//;return e.binary&&(e.begin=function(...e){return e.map(e=>h(e)).join("")}(n,/.*\b/,e.binary,/\b.*/)),i({className:"meta",begin:n,end:/$/,relevance:0,"on:begin":(e,n)=>{0!==e.index&&n.ignoreMatch()}},e)},BACKSLASH_ESCAPE:b,APOS_STRING_MODE:g,QUOTE_STRING_MODE:$,PHRASAL_WORDS_MODE:m,COMMENT:_,C_LINE_COMMENT_MODE:y,C_BLOCK_COMMENT_MODE:w,HASH_COMMENT_MODE:v,NUMBER_MODE:x,C_NUMBER_MODE:k,BINARY_NUMBER_MODE:E,CSS_NUMBER_MODE:T,REGEXP_MODE:R,TITLE_MODE:C,UNDERSCORE_TITLE_MODE:A,METHOD_GUARD:N,END_SAME_AS_BEGIN:function(e){return Object.assign(e,{"on:begin":(e,n)=>{n.data._beginMatch=e[1]},"on:end":(e,n)=>{n.data._beginMatch!==e[1]&&n.ignoreMatch()}})}});function O(e,n){"."===e.input[e.index-1]&&n.ignoreMatch()}function j(e,n){n&&e.beginKeywords&&(e.begin="\\b("+e.beginKeywords.split(" ").join("|")+")(?!\\.)(?=\\b|\\s)",e.__beforeBegin=O,e.keywords=e.keywords||e.beginKeywords,delete e.beginKeywords,void 0===e.relevance&&(e.relevance=0))}function L(e,n){Array.isArray(e.illegal)&&(e.illegal=function(...e){return"("+e.map(e=>h(e)).join("|")+")"}(...e.illegal))}function S(e,n){if(e.match){if(e.begin||e.end)throw new Error("begin & end are not supported with match");e.begin=e.match,delete e.match}}function P(e,n){void 0===e.relevance&&(e.relevance=1)}const D=["of","and","for","in","not","or","if","then","parent","list","value"];function B(e,n){return n?Number(n):function(e){return D.includes(e.toLowerCase())}(e)?0:1}function I(e,{plugins:n}){function t(n,t){return new RegExp(h(n),"m"+(e.case_insensitive?"i":"")+(t?"g":""))}class r{constructor(){this.matchIndexes={},this.regexes=[],this.matchAt=1,this.position=0}addRule(e,n){n.position=this.position++,this.matchIndexes[this.matchAt]=n,this.regexes.push([n,e]),this.matchAt+=function(e){return new RegExp(e.toString()+"|").exec("").length-1}(e)+1}compile(){0===this.regexes.length&&(this.exec=()=>null);const e=this.regexes.map(e=>e[1]);this.matcherRe=t(function(e,n="|"){let t=0;return e.map(e=>{t+=1;const n=t;let r=h(e),o="";for(;r.length>0;){const e=f.exec(r);if(!e){o+=r;break}o+=r.substring(0,e.index),r=r.substring(e.index+e[0].length),"\\"===e[0][0]&&e[1]?o+="\\"+String(Number(e[1])+n):(o+=e[0],"("===e[0]&&t++)}return o}).map(e=>`(${e})`).join(n)}(e),!0),this.lastIndex=0}exec(e){this.matcherRe.lastIndex=this.lastIndex;const n=this.matcherRe.exec(e);if(!n)return null;const t=n.findIndex((e,n)=>n>0&&void 0!==e),r=this.matchIndexes[t];return n.splice(0,t),Object.assign(n,r)}}class o{constructor(){this.rules=[],this.multiRegexes=[],this.count=0,this.lastIndex=0,this.regexIndex=0}getMatcher(e){if(this.multiRegexes[e])return this.multiRegexes[e];const n=new r;return this.rules.slice(e).forEach(([e,t])=>n.addRule(e,t)),n.compile(),this.multiRegexes[e]=n,n}resumingScanAtSamePosition(){return 0!==this.regexIndex}considerAll(){this.regexIndex=0}addRule(e,n){this.rules.push([e,n]),"begin"===n.type&&this.count++}exec(e){const n=this.getMatcher(this.regexIndex);n.lastIndex=this.lastIndex;let t=n.exec(e);if(this.resumingScanAtSamePosition())if(t&&t.index===this.lastIndex);else{const n=this.getMatcher(0);n.lastIndex=this.lastIndex+1,t=n.exec(e)}return t&&(this.regexIndex+=t.position+1,this.regexIndex===this.count&&this.considerAll()),t}}if(e.compilerExtensions||(e.compilerExtensions=[]),e.contains&&e.contains.includes("self"))throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");return e.classNameAliases=i(e.classNameAliases||{}),function n(r,a){const s=r;if(r.isCompiled)return s;[S].forEach(e=>e(r,a)),e.compilerExtensions.forEach(e=>e(r,a)),r.__beforeBegin=null,[j,L,P].forEach(e=>e(r,a)),r.isCompiled=!0;let l=null;if("object"==typeof r.keywords&&(l=r.keywords.$pattern,delete r.keywords.$pattern),r.keywords&&(r.keywords=function e(n,t,r="keyword"){const o={};return"string"==typeof n?a(r,n.split(" ")):Array.isArray(n)?a(r,n):Object.keys(n).forEach((function(r){Object.assign(o,e(n[r],t,r))})),o;function a(e,n){t&&(n=n.map(e=>e.toLowerCase())),n.forEach((function(n){const t=n.split("|");o[t[0]]=[e,B(t[0],t[1])]}))}}(r.keywords,e.case_insensitive)),r.lexemes&&l)throw new Error("ERR: Prefer `keywords.$pattern` to `mode.lexemes`, BOTH are not allowed. (see mode reference) ");return l=l||r.lexemes||/\w+/,s.keywordPatternRe=t(l,!0),a&&(r.begin||(r.begin=/\B|\b/),s.beginRe=t(r.begin),r.endSameAsBegin&&(r.end=r.begin),r.end||r.endsWithParent||(r.end=/\B|\b/),r.end&&(s.endRe=t(r.end)),s.terminatorEnd=h(r.end)||"",r.endsWithParent&&a.terminatorEnd&&(s.terminatorEnd+=(r.end?"|":"")+a.terminatorEnd)),r.illegal&&(s.illegalRe=t(r.illegal)),r.contains||(r.contains=[]),r.contains=[].concat(...r.contains.map((function(e){return function(e){e.variants&&!e.cachedVariants&&(e.cachedVariants=e.variants.map((function(n){return i(e,{variants:null},n)})));if(e.cachedVariants)return e.cachedVariants;if(function e(n){return!!n&&(n.endsWithParent||e(n.starts))}(e))return i(e,{starts:e.starts?i(e.starts):null});if(Object.isFrozen(e))return i(e);return e}("self"===e?r:e)}))),r.contains.forEach((function(e){n(e,s)})),r.starts&&n(r.starts,a),s.matcher=function(e){const n=new o;return e.contains.forEach(e=>n.addRule(e.begin,{rule:e,type:"begin"})),e.terminatorEnd&&n.addRule(e.terminatorEnd,{type:"end"}),e.illegal&&n.addRule(e.illegal,{type:"illegal"}),n}(s),s}(e)}function H(e){const n={props:["language","code","autodetect"],data:function(){return{detectedLanguage:"",unknownLanguage:!1}},computed:{className(){return this.unknownLanguage?"":"hljs "+this.detectedLanguage},highlighted(){if(!this.autoDetect&&!e.getLanguage(this.language))return console.warn(`The language "${this.language}" you specified could not be found.`),this.unknownLanguage=!0,s(this.code);let n={};return this.autoDetect?(n=e.highlightAuto(this.code),this.detectedLanguage=n.language):(n=e.highlight(this.language,this.code,this.ignoreIllegals),this.detectedLanguage=this.language),n.value},autoDetect(){return!this.language||(e=this.autodetect,Boolean(e||""===e));var e},ignoreIllegals:()=>!0},render(e){return e("pre",{},[e("code",{class:this.className,domProps:{innerHTML:this.highlighted}})])}};return{Component:n,VuePlugin:{install(e){e.component("highlightjs",n)}}}}const F={"after:highlightElement":({el:e,result:n,text:t})=>{const r=W(e);if(!r.length)return;const o=document.createElement("div");o.innerHTML=n.value,n.value=function(e,n,t){let r=0,o="";const a=[];function i(){return e.length&&n.length?e[0].offset!==n[0].offset?e[0].offset<n[0].offset?e:n:"start"===n[0].event?e:n:e.length?e:n}function l(e){o+="<"+z(e)+[].map.call(e.attributes,(function(e){return" "+e.nodeName+'="'+s(e.value)+'"'})).join("")+">"}function c(e){o+="</"+z(e)+">"}function d(e){("start"===e.event?l:c)(e.node)}for(;e.length||n.length;){let n=i();if(o+=s(t.substring(r,n[0].offset)),r=n[0].offset,n===e){a.reverse().forEach(c);do{d(n.splice(0,1)[0]),n=i()}while(n===e&&n.length&&n[0].offset===r);a.reverse().forEach(l)}else"start"===n[0].event?a.push(n[0].node):a.pop(),d(n.splice(0,1)[0])}return o+s(t.substr(r))}(r,W(o),t)}};function z(e){return e.nodeName.toLowerCase()}function W(e){const n=[];return function e(t,r){for(let o=t.firstChild;o;o=o.nextSibling)3===o.nodeType?r+=o.nodeValue.length:1===o.nodeType&&(n.push({event:"start",offset:r,node:o}),r=e(o,r),z(o).match(/br|hr|img|input/)||n.push({event:"stop",offset:r,node:o}));return r}(e,0),n}const X={},Y=e=>{console.error(e)},U=(e,...n)=>{console.log("WARN: "+e,...n)},K=(e,n)=>{X[`${e}/${n}`]||(console.log(`Deprecated as of ${e}. ${n}`),X[`${e}/${n}`]=!0)},q=s,G=i,V=Symbol("nomatch");var Z=function(e){const n=Object.create(null),t=Object.create(null),o=[];let s=!0;const i=/(^(<[^>]+>|\t|)+|\n)/gm,l="Could not find the language '{}', did you forget to load/include a language module?",c={disableAutodetect:!0,name:"Plain text",contains:[]};let d={noHighlightRe:/^(no-?highlight)$/i,languageDetectRe:/\blang(?:uage)?-([\w-]+)\b/i,classPrefix:"hljs-",tabReplace:null,useBR:!1,languages:null,__emitter:u};function h(e){return d.noHighlightRe.test(e)}function f(e,n,t,r){let o="",a="";"object"==typeof n?(o=e,t=n.ignoreIllegals,a=n.language,r=void 0):(K("10.7.0","highlight(lang, code, ...args) has been deprecated."),K("10.7.0","Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277"),a=e,o=n);const s={code:o,language:a};T("before:highlight",s);const i=s.result?s.result:p(s.language,s.code,t,r);return i.code=s.code,T("after:highlight",i),i}function p(e,t,r,i){function c(e,n){const t=y.case_insensitive?n[0].toLowerCase():n[0];return Object.prototype.hasOwnProperty.call(e.keywords,t)&&e.keywords[t]}function u(){null!=k.subLanguage?function(){if(""===R)return;let e=null;if("string"==typeof k.subLanguage){if(!n[k.subLanguage])return void T.addText(R);e=p(k.subLanguage,R,!0,E[k.subLanguage]),E[k.subLanguage]=e.top}else e=b(R,k.subLanguage.length?k.subLanguage:null);k.relevance>0&&(C+=e.relevance),T.addSublanguage(e.emitter,e.language)}():function(){if(!k.keywords)return void T.addText(R);let e=0;k.keywordPatternRe.lastIndex=0;let n=k.keywordPatternRe.exec(R),t="";for(;n;){t+=R.substring(e,n.index);const r=c(k,n);if(r){const[e,o]=r;if(T.addText(t),t="",C+=o,e.startsWith("_"))t+=n[0];else{const t=y.classNameAliases[e]||e;T.addKeyword(n[0],t)}}else t+=n[0];e=k.keywordPatternRe.lastIndex,n=k.keywordPatternRe.exec(R)}t+=R.substr(e),T.addText(t)}(),R=""}function h(e){return e.className&&T.openNode(y.classNameAliases[e.className]||e.className),k=Object.create(e,{parent:{value:k}}),k}function f(e){return 0===k.matcher.regexIndex?(R+=e[0],1):(M=!0,0)}function g(e){const n=e[0],t=e.rule,r=new a(t),o=[t.__beforeBegin,t["on:begin"]];for(const t of o)if(t&&(t(e,r),r.isMatchIgnored))return f(n);return t&&t.endSameAsBegin&&(t.endRe=new RegExp(n.replace(/[-/\\^$*+?.()|[\]{}]/g,"\\$&"),"m")),t.skip?R+=n:(t.excludeBegin&&(R+=n),u(),t.returnBegin||t.excludeBegin||(R=n)),h(t),t.returnBegin?0:n.length}function $(e){const n=e[0],r=t.substr(e.index),o=function e(n,t,r){let o=function(e,n){const t=e&&e.exec(n);return t&&0===t.index}(n.endRe,r);if(o){if(n["on:end"]){const e=new a(n);n["on:end"](t,e),e.isMatchIgnored&&(o=!1)}if(o){for(;n.endsParent&&n.parent;)n=n.parent;return n}}if(n.endsWithParent)return e(n.parent,t,r)}(k,e,r);if(!o)return V;const s=k;s.skip?R+=n:(s.returnEnd||s.excludeEnd||(R+=n),u(),s.excludeEnd&&(R=n));do{k.className&&T.closeNode(),k.skip||k.subLanguage||(C+=k.relevance),k=k.parent}while(k!==o.parent);return o.starts&&(o.endSameAsBegin&&(o.starts.endRe=o.endRe),h(o.starts)),s.returnEnd?0:n.length}let m={};function _(n,o){const a=o&&o[0];if(R+=n,null==a)return u(),0;if("begin"===m.type&&"end"===o.type&&m.index===o.index&&""===a){if(R+=t.slice(o.index,o.index+1),!s){const n=new Error("0 width match regex");throw n.languageName=e,n.badRule=m.rule,n}return 1}if(m=o,"begin"===o.type)return g(o);if("illegal"===o.type&&!r){const e=new Error('Illegal lexeme "'+a+'" for mode "'+(k.className||"<unnamed>")+'"');throw e.mode=k,e}if("end"===o.type){const e=$(o);if(e!==V)return e}if("illegal"===o.type&&""===a)return 1;if(N>1e5&&N>3*o.index){throw new Error("potential infinite loop, way more iterations than matches")}return R+=a,a.length}const y=x(e);if(!y)throw Y(l.replace("{}",e)),new Error('Unknown language: "'+e+'"');const w=I(y,{plugins:o});let v="",k=i||w;const E={},T=new d.__emitter(d);!function(){const e=[];for(let n=k;n!==y;n=n.parent)n.className&&e.unshift(n.className);e.forEach(e=>T.openNode(e))}();let R="",C=0,A=0,N=0,M=!1;try{for(k.matcher.considerAll();;){N++,M?M=!1:k.matcher.considerAll(),k.matcher.lastIndex=A;const e=k.matcher.exec(t);if(!e)break;const n=_(t.substring(A,e.index),e);A=e.index+n}return _(t.substr(A)),T.closeAllNodes(),T.finalize(),v=T.toHTML(),{relevance:Math.floor(C),value:v,language:e,illegal:!1,emitter:T,top:k}}catch(n){if(n.message&&n.message.includes("Illegal"))return{illegal:!0,illegalBy:{msg:n.message,context:t.slice(A-100,A+100),mode:n.mode},sofar:v,relevance:0,value:q(t),emitter:T};if(s)return{illegal:!1,relevance:0,value:q(t),emitter:T,language:e,top:k,errorRaised:n};throw n}}function b(e,t){t=t||d.languages||Object.keys(n);const r=function(e){const n={relevance:0,emitter:new d.__emitter(d),value:q(e),illegal:!1,top:c};return n.emitter.addText(e),n}(e),o=t.filter(x).filter(E).map(n=>p(n,e,!1));o.unshift(r);const a=o.sort((e,n)=>{if(e.relevance!==n.relevance)return n.relevance-e.relevance;if(e.language&&n.language){if(x(e.language).supersetOf===n.language)return 1;if(x(n.language).supersetOf===e.language)return-1}return 0}),[s,i]=a,l=s;return l.second_best=i,l}const g={"before:highlightElement":({el:e})=>{d.useBR&&(e.innerHTML=e.innerHTML.replace(/\n/g,"").replace(/<br[ /]*>/g,"\n"))},"after:highlightElement":({result:e})=>{d.useBR&&(e.value=e.value.replace(/\n/g,"<br>"))}},$=/^(<[^>]+>|\t)+/gm,m={"after:highlightElement":({result:e})=>{d.tabReplace&&(e.value=e.value.replace($,e=>e.replace(/\t/g,d.tabReplace)))}};function _(e){let n=null;const r=function(e){let n=e.className+" ";n+=e.parentNode?e.parentNode.className:"";const t=d.languageDetectRe.exec(n);if(t){const n=x(t[1]);return n||(U(l.replace("{}",t[1])),U("Falling back to no-highlight mode for this block.",e)),n?t[1]:"no-highlight"}return n.split(/\s+/).find(e=>h(e)||x(e))}(e);if(h(r))return;T("before:highlightElement",{el:e,language:r}),n=e;const o=n.textContent,a=r?f(o,{language:r,ignoreIllegals:!0}):b(o);T("after:highlightElement",{el:e,result:a,text:o}),e.innerHTML=a.value,function(e,n,r){const o=n?t[n]:r;e.classList.add("hljs"),o&&e.classList.add(o)}(e,r,a.language),e.result={language:a.language,re:a.relevance,relavance:a.relevance},a.second_best&&(e.second_best={language:a.second_best.language,re:a.second_best.relevance,relavance:a.second_best.relevance})}const y=()=>{if(y.called)return;y.called=!0,K("10.6.0","initHighlighting() is deprecated.  Use highlightAll() instead.");document.querySelectorAll("pre code").forEach(_)};let w=!1;function v(){if("loading"===document.readyState)return void(w=!0);document.querySelectorAll("pre code").forEach(_)}function x(e){return e=(e||"").toLowerCase(),n[e]||n[t[e]]}function k(e,{languageName:n}){"string"==typeof e&&(e=[e]),e.forEach(e=>{t[e.toLowerCase()]=n})}function E(e){const n=x(e);return n&&!n.disableAutodetect}function T(e,n){const t=e;o.forEach((function(e){e[t]&&e[t](n)}))}"undefined"!=typeof window&&window.addEventListener&&window.addEventListener("DOMContentLoaded",(function(){w&&v()}),!1),Object.assign(e,{highlight:f,highlightAuto:b,highlightAll:v,fixMarkup:function(e){return K("10.2.0","fixMarkup will be removed entirely in v11.0"),K("10.2.0","Please see https://github.com/highlightjs/highlight.js/issues/2534"),n=e,d.tabReplace||d.useBR?n.replace(i,e=>"\n"===e?d.useBR?"<br>":e:d.tabReplace?e.replace(/\t/g,d.tabReplace):e):n;var n},highlightElement:_,highlightBlock:function(e){return K("10.7.0","highlightBlock will be removed entirely in v12.0"),K("10.7.0","Please use highlightElement now."),_(e)},configure:function(e){e.useBR&&(K("10.3.0","'useBR' will be removed entirely in v11.0"),K("10.3.0","Please see https://github.com/highlightjs/highlight.js/issues/2559")),d=G(d,e)},initHighlighting:y,initHighlightingOnLoad:function(){K("10.6.0","initHighlightingOnLoad() is deprecated.  Use highlightAll() instead."),w=!0},registerLanguage:function(t,r){let o=null;try{o=r(e)}catch(e){if(Y("Language definition for '{}' could not be registered.".replace("{}",t)),!s)throw e;Y(e),o=c}o.name||(o.name=t),n[t]=o,o.rawDefinition=r.bind(null,e),o.aliases&&k(o.aliases,{languageName:t})},unregisterLanguage:function(e){delete n[e];for(const n of Object.keys(t))t[n]===e&&delete t[n]},listLanguages:function(){return Object.keys(n)},getLanguage:x,registerAliases:k,requireLanguage:function(e){K("10.4.0","requireLanguage will be removed entirely in v11."),K("10.4.0","Please see https://github.com/highlightjs/highlight.js/pull/2844");const n=x(e);if(n)return n;throw new Error("The '{}' language is required, but not loaded.".replace("{}",e))},autoDetection:E,inherit:G,addPlugin:function(e){!function(e){e["before:highlightBlock"]&&!e["before:highlightElement"]&&(e["before:highlightElement"]=n=>{e["before:highlightBlock"](Object.assign({block:n.el},n))}),e["after:highlightBlock"]&&!e["after:highlightElement"]&&(e["after:highlightElement"]=n=>{e["after:highlightBlock"](Object.assign({block:n.el},n))})}(e),o.push(e)},vuePlugin:H(e).VuePlugin}),e.debugMode=function(){s=!1},e.safeMode=function(){s=!0},e.versionString="10.7.2";for(const e in M)"object"==typeof M[e]&&r(M[e]);return Object.assign(e,M),e.addPlugin(g),e.addPlugin(F),e.addPlugin(m),e}({});e.exports=Z},function(e,n,t){"use strict";var r=t(3),o=t.n(r)()((function(e){return e[1]}));o.push([e.i,"/*\n\nAtom One Dark by Daniel Gamage\nOriginal One Dark Syntax theme from https://github.com/atom/one-dark-syntax\n\nbase:    #282c34\nmono-1:  #abb2bf\nmono-2:  #818896\nmono-3:  #5c6370\nhue-1:   #56b6c2\nhue-2:   #61aeee\nhue-3:   #c678dd\nhue-4:   #98c379\nhue-5:   #e06c75\nhue-5-2: #be5046\nhue-6:   #d19a66\nhue-6-2: #e6c07b\n\n*/\n\n.hljs {\n  display: block;\n  overflow-x: auto;\n  padding: 0.5em;\n  color: #abb2bf;\n  background: #282c34;\n}\n\n.hljs-comment,\n.hljs-quote {\n  color: #5c6370;\n  font-style: italic;\n}\n\n.hljs-doctag,\n.hljs-keyword,\n.hljs-formula {\n  color: #c678dd;\n}\n\n.hljs-section,\n.hljs-name,\n.hljs-selector-tag,\n.hljs-deletion,\n.hljs-subst {\n  color: #e06c75;\n}\n\n.hljs-literal {\n  color: #56b6c2;\n}\n\n.hljs-string,\n.hljs-regexp,\n.hljs-addition,\n.hljs-attribute,\n.hljs-meta-string {\n  color: #98c379;\n}\n\n.hljs-built_in,\n.hljs-class .hljs-title {\n  color: #e6c07b;\n}\n\n.hljs-attr,\n.hljs-variable,\n.hljs-template-variable,\n.hljs-type,\n.hljs-selector-class,\n.hljs-selector-attr,\n.hljs-selector-pseudo,\n.hljs-number {\n  color: #d19a66;\n}\n\n.hljs-symbol,\n.hljs-bullet,\n.hljs-link,\n.hljs-meta,\n.hljs-selector-id,\n.hljs-title {\n  color: #61aeee;\n}\n\n.hljs-emphasis {\n  font-style: italic;\n}\n\n.hljs-strong {\n  font-weight: bold;\n}\n\n.hljs-link {\n  text-decoration: underline;\n}\n",""]),n.a=o},function(e,n,t){"use strict";var r,o=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),s=[];function i(e){for(var n=-1,t=0;t<s.length;t++)if(s[t].identifier===e){n=t;break}return n}function l(e,n){for(var t={},r=[],o=0;o<e.length;o++){var a=e[o],l=n.base?a[0]+n.base:a[0],c=t[l]||0,d="".concat(l," ").concat(c);t[l]=c+1;var u=i(d),h={css:a[1],media:a[2],sourceMap:a[3]};-1!==u?(s[u].references++,s[u].updater(h)):s.push({identifier:d,updater:g(h,n),references:1}),r.push(d)}return r}function c(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var o=t.nc;o&&(r.nonce=o)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var s=a(e.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(n)}return n}var d,u=(d=[],function(e,n){return d[e]=n,d.filter(Boolean).join("\n")});function h(e,n,t,r){var o=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=u(n,o);else{var a=document.createTextNode(o),s=e.childNodes;s[n]&&e.removeChild(s[n]),s.length?e.insertBefore(a,s[n]):e.appendChild(a)}}function f(e,n,t){var r=t.css,o=t.media,a=t.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var p=null,b=0;function g(e,n){var t,r,o;if(n.singleton){var a=b++;t=p||(p=c(n)),r=h.bind(null,t,a,!1),o=h.bind(null,t,a,!0)}else t=c(n),r=f.bind(null,t,n),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else o()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=o());var t=l(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var o=i(t[r]);s[o].references--}for(var a=l(e,n),c=0;c<t.length;c++){var d=i(t[c]);0===s[d].references&&(s[d].updater(),s.splice(d,1))}t=a}}}},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=e(n);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(r)for(var a=0;a<this.length;a++){var s=this[a][0];null!=s&&(o[s]=!0)}for(var i=0;i<e.length;i++){var l=[].concat(e[i]);r&&o[l[0]]||(t&&(l[2]?l[2]="".concat(t," and ").concat(l[2]):l[2]=t),n.push(l))}},n}},function(e,n,t){"use strict";t.r(n);var r=t(0),o=t.n(r),a=t(2),s=t.n(a),i=t(1),l={insert:"head",singleton:!1};s()(i.a,l),i.a.locals;const c=window;var d=t.p+"f1e4a82bb03bebeb2d08db09e498b129.png";const u=Promise.all([t.e(1),t.e(2)]).then(t.bind(null,12)).catch(console.error);o.a.registerLanguage("potatoasm",(function(e){return{name:"Sanyo LC8670 Assembly",case_insensitive:!0,keywords:{$pattern:"[.%]?"+e.IDENT_RE,keyword:"acc nop br ld call callr brf st callf jmpf mov mov jmp mul be div bne bpc dbnz push inc bp pop dec bz add bn bnz addc ret sub not1 reti subc ror ldc xch clr1 rorc or rol and set1 rolc xor ",built_in:"acc psw b c trl trh sp pcon ie ip ext ocr t0con t0prr t0l t0lr t0h t0hr t1cnt t1lc t1l t1lr t1hc t1h t1hr mcr stad cnr tdr xbnk vccr scon0 buf0 sbr scon1 sbuf1 p1 p1ddr p1fcr p3 p3ddr p3int p7 i01cr i23cr isl vsel vrmd1 vrmad2 vtrbf vlreg btcr xram .byte .word .org .include .cnop "},contains:[e.COMMENT("(;|\\*)","\n",{relevance:0}),{className:"number",variants:[{begin:"#?\\$[0-9A-Fa-f]+",relevance:0},{begin:"#[0-9]+",relevance:0},{begin:"\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b"},{begin:"\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b"}]},e.QUOTE_STRING_MODE,{className:"string",variants:[{begin:"'",end:"[^\\\\]'"},{begin:"`",end:"[^\\\\]`"}],relevance:0},{className:"symbol",variants:[{begin:"^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)"},{begin:"^\\s*%%[A-Za-z0-9_$#@~.?]*:"}],relevance:0},{className:"subst",begin:"%[0-9]+",relevance:0},{className:"subst",begin:"%!S+",relevance:0}]}})),o.a.configure({languages:[]});const h=document.getElementById("editor");console.log(document.querySelector(".editor")),console.log(h);const f=new function(e,n,t={}){const r=Object.assign({tab:"\t",indentOn:/{$/,spellcheck:!1,catchTab:!0,preserveIdent:!0,addClosing:!0,history:!0,window:c},t),o=r.window,a=o.document;let s,i,l=[],d=[],u=-1,h=!1,f=navigator.userAgent.toLowerCase().indexOf("firefox")>-1;e.setAttribute("contentEditable",f?"true":"plaintext-only"),e.setAttribute("spellcheck",r.spellcheck?"true":"false"),e.style.outline="none",e.style.overflowWrap="break-word",e.style.overflowY="auto",e.style.resize="vertical",e.style.whiteSpace="pre-wrap",n(e);const p=N(()=>{const t=_();n(e,t),y(t)},30);let b=!1;const g=e=>!R(e)&&!C(e)&&"Meta"!==e.key&&"Control"!==e.key&&"Alt"!==e.key&&!e.key.startsWith("Arrow"),$=N(e=>{g(e)&&(k(),b=!1)},300),m=(n,t)=>{l.push([n,t]),e.addEventListener(n,t)};function _(){const n=L(),t={start:0,end:0,dir:void 0};return E(e,e=>{if(e===n.anchorNode&&e===n.focusNode)return t.start+=n.anchorOffset,t.end+=n.focusOffset,t.dir=n.anchorOffset<=n.focusOffset?"->":"<-","stop";if(e===n.anchorNode){if(t.start+=n.anchorOffset,t.dir)return"stop";t.dir="->"}else if(e===n.focusNode){if(t.end+=n.focusOffset,t.dir)return"stop";t.dir="<-"}e.nodeType===Node.TEXT_NODE&&("->"!=t.dir&&(t.start+=e.nodeValue.length),"<-"!=t.dir&&(t.end+=e.nodeValue.length))}),t}function y(n){const t=L();let r,o,a=0,s=0;if(n.dir||(n.dir="->"),n.start<0&&(n.start=0),n.end<0&&(n.end=0),"<-"==n.dir){const{start:e,end:t}=n;n.start=t,n.end=e}let i=0;E(e,e=>{if(e.nodeType!==Node.TEXT_NODE)return;const t=(e.nodeValue||"").length;if(i+t>=n.start&&(r||(r=e,a=n.start-i),i+t>=n.end))return o=e,s=n.end-i,"stop";i+=t}),r||(r=e),o||(o=e),"<-"==n.dir&&([r,a,o,s]=[o,s,r,a]),t.setBaseAndExtent(r,a,o,s)}function w(){const n=L().getRangeAt(0),t=a.createRange();return t.selectNodeContents(e),t.setEnd(n.startContainer,n.startOffset),t.toString()}function v(){const n=L().getRangeAt(0),t=a.createRange();return t.selectNodeContents(e),t.setStart(n.endContainer,n.endOffset),t.toString()}function x(e){if(f&&"Enter"===e.key)if(j(e),e.stopPropagation(),""==v()){A("\n ");const e=_();e.start=--e.end,y(e)}else A("\n")}function k(){if(!h)return;const n=e.innerHTML,t=_(),r=d[u];if(r&&r.html===n&&r.pos.start===t.start&&r.pos.end===t.end)return;u++,d[u]={html:n,pos:t},d.splice(u+1);u>300&&(u=300,d.splice(0,1))}function E(e,n){const t=[];e.firstChild&&t.push(e.firstChild);let r=t.pop();for(;r&&"stop"!==n(r);)r.nextSibling&&t.push(r.nextSibling),r.firstChild&&t.push(r.firstChild),r=t.pop()}function T(e){return e.metaKey||e.ctrlKey}function R(e){return T(e)&&!e.shiftKey&&"z"===e.key}function C(e){return T(e)&&e.shiftKey&&"z"===e.key}function A(e){e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#039;"),a.execCommand("insertHTML",!1,e)}function N(e,n){let t=0;return(...r)=>{clearTimeout(t),t=o.setTimeout(()=>e(...r),n)}}function M(e){let n=e.length-1;for(;n>=0&&"\n"!==e[n];)n--;n++;let t=n;for(;t<e.length&&/[ \t]/.test(e[t]);)t++;return[e.substring(n,t)||"",n,t]}function O(){return e.textContent||""}function j(e){e.preventDefault()}function L(){var n;return(null===(n=e.parentNode)||void 0===n?void 0:n.nodeType)==Node.DOCUMENT_FRAGMENT_NODE?e.parentNode.getSelection():o.getSelection()}return m("keydown",n=>{n.defaultPrevented||(i=O(),r.preserveIdent?function(e){if("Enter"===e.key){const n=w(),t=v();let[o]=M(n),a=o;if(r.indentOn.test(n)&&(a+=r.tab),a.length>0?(j(e),e.stopPropagation(),A("\n"+a)):x(e),a!==o&&"}"===t[0]){const e=_();A("\n"+o),y(e)}}}(n):x(n),r.catchTab&&function(e){if("Tab"===e.key)if(j(e),e.shiftKey){const e=w();let[n,t]=M(e);if(n.length>0){const e=_(),o=Math.min(r.tab.length,n.length);y({start:t,end:t+o}),a.execCommand("delete"),e.start-=o,e.end-=o,y(e)}}else A(r.tab)}(n),r.addClosing&&function(e){const n="([{'\"",t=")]}'\"",r=v(),o=w(),a="\\"===o.substr(o.length-1),s=r.substr(0,1);if(t.includes(e.key)&&!a&&s===e.key){const n=_();j(e),n.start=++n.end,y(n)}else if(n.includes(e.key)&&!a&&("\"'".includes(e.key)||[""," ","\n"].includes(s))){j(e);const r=_(),o=r.start==r.end?"":L().toString();A(e.key+o+t[n.indexOf(e.key)]),r.start++,r.end++,y(r)}}(n),r.history&&(!function(n){if(R(n)){j(n),u--;const t=d[u];t&&(e.innerHTML=t.html,y(t.pos)),u<0&&(u=0)}if(C(n)){j(n),u++;const t=d[u];t&&(e.innerHTML=t.html,y(t.pos)),u>=d.length&&u--}}(n),g(n)&&!b&&(k(),b=!0)))}),m("keyup",e=>{e.defaultPrevented||e.isComposing||(i!==O()&&p(),$(e),s&&s(O()))}),m("focus",e=>{h=!0}),m("blur",e=>{h=!1}),m("paste",t=>{k(),function(t){j(t);const r=(t.originalEvent||t).clipboardData.getData("text/plain").replace(/\r/g,""),o=_();A(r),n(e),y({start:o.start+r.length,end:o.start+r.length})}(t),k(),s&&s(O())}),{updateOptions(e){e=Object.assign(Object.assign({},e),e)},updateCode(t){e.textContent=t,n(e)},onUpdate(e){s=e},toString:O,save:_,restore:y,recordHistory:k,destroy(){for(let[n,t]of l)e.removeEventListener(n,t)}}}(h,function(e,n={}){const t=Object.assign({class:"codejar-linenumbers",wrapClass:"codejar-wrap",width:"35px",backgroundColor:"rgba(128, 128, 128, 0.15)",color:""},n);let r;return function(n){e(n),r||(r=function(e,n){const t=getComputedStyle(e),r=document.createElement("div");r.className=n.wrapClass,r.style.position="relative";const o=document.createElement("div");o.className=n.class,r.appendChild(o),o.style.position="absolute",o.style.top="0px",o.style.left="0px",o.style.bottom="0px",o.style.width=n.width,o.style.overflow="hidden",o.style.backgroundColor=n.backgroundColor,o.style.color=n.color||t.color,o.style.setProperty("mix-blend-mode","difference"),o.style.fontFamily=t.fontFamily,o.style.fontSize=t.fontSize,o.style.lineHeight=t.lineHeight,o.style.paddingTop=t.paddingTop,o.style.paddingLeft=t.paddingLeft,o.style.borderTopLeftRadius=t.borderTopLeftRadius,o.style.borderBottomLeftRadius=t.borderBottomLeftRadius;const a=document.createElement("div");return a.style.position="relative",a.style.top="0px",o.appendChild(a),e.style.paddingLeft=`calc(${n.width} + ${o.style.paddingLeft})`,e.style.whiteSpace="pre",e.parentNode.insertBefore(r,e),r.appendChild(e),a}(n,t),n.addEventListener("scroll",()=>r.style.top=`-${n.scrollTop}px`));const o=(n.textContent||"").replace(/\n+$/,"\n").split("\n").length+1;let a="";for(let e=1;e<o;e++)a+=e+"\n";r.innerText=a}}(e=>{e.textContent=e.textContent,o.a.highlightBlock(e)}));f.updateCode("; Example Source Skeleton            written by tyro@deco.franken.de\n  ;\n  ; \"I worked damn long to add all those comments, so PLEASE leave this\n  ; note in when spreading the file or putting a copy on your own page...\"\n  \n  \n  ;       .include \"sfr.i\"\n  \n  ; To enable the assembler to recognize all Special Function Registers and\n  ; PSW bits, you need the file sfr.i, which should be placed in the same\n  ; directory where the assembler is.\n  \n  \n  * ------------------------------------------------------\n  *  Variable-Definitions\n  \n  ; Here you can define variables to store data.  For example, if you want\n  ; to store a counter value somewhere, you can define a variable named\n  ; 'counter' with the following code:\n  ;\n  ; counter = $30\n  ;\n  ; $30 being the memory address where the variable is stored\n  ;\n  ; Now you can write to that address by using the assigned name, for example\n  ;\n  ;      MOV #$00,COUNTER\n  ;\n  ; will store value $00 at memory address $30.  Or\n  ;\n  ;      LD COUNTER\n  ;\n  ; will load the value stored in memory address $30 into the ACC register.\n  \n  \n  * ------------------------------------------------------\n  *  Reset- and Interrupt-Vectors\n  \n  ; The following are interrupt vectors used by the VMU hardware.  DO NOT\n  ; CHANGE ANY OF THEM.\n  ;\n  ; .org <address> means that the code following the .org directive starts\n  ; at the given address.  For example\n  ;\n  ;      .org 200\n  ;\n  ;      XOR ACC\n  ;\n  ; means that 'XOR ACC' will be placed at memory offset $200 in the program,\n  \n         .org    0\n         jmpf    start           ; far jump to the start of the main program\n  \n         .org    $3\n         jmp     nop_irq\n  \n         .org    $b\n         jmp     nop_irq\n  \n         .org    $13\n         jmp     draw_animation_int\n  \n         .org    $1b\n         jmp     t1int\n  \n         .org    $23\n         jmp     nop_irq\n  \n         .org    $2b\n         jmp     nop_irq\n  \n         .org    $33\n         jmp     nop_irq\n  \n         .org    $3b\n         jmp     nop_irq\n  \n         .org    $43\n         jmp     nop_irq\n  \n         .org    $4b\n         clr1    p3int,0\n         clr1    p3int,1\n  \n  nop_irq:\n         reti\n  \n         .org    $130\n  t1int:\n         push    ie\n         clr1    ie,7\n         not1    ext,0\n         jmpf    t1int\n         pop     ie\n         reti\n  \n         .org    $1f0\n  goodbye:\n         not1    ext,0\n         jmpf    goodbye         ; leave game mode\n  \n  * ------------------------------------------------------\n  *  Game Header\n  \n  ; This is the game header, containing info about the game.\n  ; 16 byte Game Description, 32 byte Copyright Info.\n  ;\n  ; The directive .byte means that the following is data that should\n  ; be stored into memory.  Examples:\n  ;\n  ;      .byte $0c               a byte with value $0c (12 decimal)\n  ;      .byte 'a'               a byte with value $61 (ASCII 'a')\n  ;      .byte %00001001         a byte with value $09 (binary notation)\n  \n         .org    $200\n  \n         .byte   \"Test Skeleton   \"                    ; 16 byte\n         .byte   \"written by tyro@deco.franken.de \"    ; 32 byte\n  \n  \n  * ------------------------------------------------------\n  *  Game Icon Definition\n  \n  ; Here is defined how many game icons (which are shown in the Dreamcast\n  ; File Manager) are stored in the header, and which what animation speed\n  ; they are displayed.\n  ;\n  ; .word is the same as .byte, only that it's 16 bit long instead of 8 bit.\n  \n         .org    $240\n  \n         .word   1               ; number of icons (max = 3)\n         .word   10              ; animation speed\n  \n  \n  * ------------------------------------------------------\n  *  Game Icon Palette Table\n  \n  ; Here you can define up to 16 different colors for the game icons.\n  ;\n  ; Each color is 4 * 4 bit:  Alpha-Contrast / Red / Green / Blue\n  ;\n  ;     Example colors:\n  ;\n  ;     1111 0000 0000 0000      $ f000     black\n  ;\n  ;     1111 1111 1100 1100      $ ffcc     lt. red\n  ;     1111 1010 0000 0000      $ fa00     dark red\n  ;     1111 1111 0000 0000      $ ff00     red\n  ;\n  ;     1111 1100 1111 1100      $ fcfc     lt. green\n  ;     1111 0000 1010 0000      $ f0a0     dark green\n  ;     1111 0000 1111 0000      $ f0f0     green\n  ;\n  ;     1111 1100 1100 1111      $ fccf     lt. blue\n  ;     1111 0000 0000 1010      $ f00a     dark blue\n  ;     1111 0000 0000 1111      $ f00f     blue\n  ;\n  ;     1111 1111 1111 1000      $ fff8     lt. yellow\n  ;     1111 1101 1101 0000      $ fdd0     dark yellow\n  ;     1111 1111 1111 0000      $ fff0     yellow\n  ;\n  ;     1111 1000 1111 1111      $ f8ff     lt. cyan\n  ;     1111 0000 1010 1010      $ f0aa     dark cyan\n  ;     1111 0010 1111 1111      $ f2ff     cyan\n  ;\n  ;     1111 1111 1000 1111      $ ff8f     lt. purple\n  ;     1111 1100 0000 1100      $ fc0c     dark purple\n  ;     1111 1111 0001 1111      $ ff1f     purple\n  ;\n  ;     1111 1111 1111 1111      $ ffff     white\n  \n         .org    $260\n  \n         .word   $f000, $ff00, $f0f0, $f00f, $fff0, $faff, $ff1f, $ffff\n  \n         ; black, red, green, blue, yellow, cyan, purple, white\n  \n         .word   $ffff, $ffff, $ffff, $ffff, $ffff, $ffff, $ffff, $ffff\n  \n         ; white, white, white, white, white, white, white, white\n  \n  \n  * ------------------------------------------------------\n  *  Game Icon Data\n  \n  ; This is where the game icons are placed.  Each icon is 512 byte long,\n  ; 32 * 32 pixel, each pixel being represented by 4 bit (one nybble) that\n  ; serve as a pointer into the color palette table.\n  ;\n  ; This example image just shows a yellow background (all nybbles pointing\n  ; to color 4 in the color palette table).\n  \n         .org    $280\n  \n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n         .byte $44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44,$44\n  \n  \n  * ------------------------------------------------------\n  *  Main Program\n  \n  ; the following code is mandatory to make the game work - just leave\n  ; it 'as is'.\n  \n  start:\n         mov #$a1,ocr      ; write $a1 into Oscillation Control Register (OCR)\n         mov #$09,mcr      ; write $09 into Mode Control Register (MCR)\n         mov #$80,vccr     ; write $80 into LCD Contrast Control Register (VCCR)\n         clr1 p3int,0      ; clear bit 0 in Port 3 Interrupt Control Register\n                           ; (P3INT)\n         clr1 p1,7         ; clear bit 7 in Port 1 Latch (P1)\n         mov #$ff,p3       ; write $ff in Port 3 Latch (P3)\n  \n         mov #$41, t0con   ; Start the t0l timer, and generate interrupts when it overflows\n  \n  \n  ; Your own program code starts here. ;)\n  ;\n  ; The following stuff only serves as an example to demonstrate how to\n  ; handle the LCD screen and keypresses.  Modify it as you please.\n  \n  \n         call clrscr             ; this clears the LCD screen\n  \n  \n  ; TRL and TRH are special function registers used to hold the high byte (TRH)\n  ; and low byte (TRL) of an address.  The 16-bit address in those registers,\n  ; together with the value in the ACC register, form an indirect memory address.\n  ; When the LDC instruction is issued, the byte located at (TRH/TRL + ACC) is\n  ; loaded into ACC.\n  \n  \n         mov #<screen_data,trl\n         mov #>screen_data,trh\n  \n         call setscr             ; this copies an image to the LCD screen\n  \n  \n  ; The GETKEYS function (taken from Marcus Comstedt's \"Tetris\" program)\n  ; doesn't really need any explanation, simply use it 'as is', like everyone\n  ; else does. ;)\n  \n  \n  .keypress:\n         ;call getkeys\n         ;bn acc,4,.keypress      ; branch if button A is pressed\n         ;bn acc,5,.keypress      ; branch if button B is pressed\n         ;\n         call show_keys_pressed\n         br .keypress            ; branch even if neither A nor B are pressed\n  \n  \n  ; The following are subroutines.\n  \n  \n  * ------------------------------------------------------\n  *  Clear Screen\n  \n  clrscr:\n         clr1 ocr,5\n         ;\n         push acc\n         push xbnk\n         push 2\n         ;\n         mov #0,xbnk\n  .cbank:\n         mov #$80,2\n  .cloop:\n         mov #0,@R2\n         ;\n         inc 2\n         ;\n         ld 2\n         and #$f\n         bne #$c,.cskip\n         ;\n         ld 2\n         add #4\n         st 2\n  .cskip:\n         ld 2\n         bnz .cloop\n         ;\n         bp xbnk,0,.cexit\n         ;\n         mov #1,xbnk\n         br .cbank\n  .cexit:\n         pop 2\n         pop xbnk\n         pop acc\n         set1 ocr,5\n         ret\n  \n  \n  ; Explanation:\n  ;\n  ;        clr1 ocr,5\n  ;\n  ; The clr1 instruction clears the fifth bit in the Oscillation Control\n  ; Register.  The previous hexadecimal value was A1, which is the binary\n  ; number 10100001.  The CPU recognizes the right most significant bit as\n  ; the zeroeth bit; the new number in the OCR is 10000001, or 81 in\n  ; hexadecimal.  This new value changes the clock speed to 5 Mhz, the\n  ; appropriate speed for accessing the LCD Frame Buffer of the VMU.\n  ;\n  ;        push acc\n  ;        push xbnk\n  ;        push 2\n  ;\n  ; The values in the accumulator, the bank address register, and memory\n  ; address 002 are stored on the stack.\n  ;\n  ;        mov #0,xbnk\n  ;\n  ; Placing the value 0 into the Bank Address Register sets it to zero.  The\n  ; LCD Frame Buffer is only large enough for half of the LCD screen; bank zero\n  ; lets us work with the top half of the LCD screen.\n  ;\n  ; .cbank:\n  ;        mov #$80,2\n  ;\n  ; The LCD frame buffer starts at address 0180.  So the starting value $80 is\n  ; placed into memory address 2.\n  ;\n  ; .cloop:\n  ;        mov #0,@R2\n  ;\n  ; @R2 is used for indirect addressing and serves as a pointer into the Special\n  ; Function Register Area of the VMU (of which locations $80 - $fb represent\n  ; the LCD Frame Buffer (XRAM) - @R0 and @R1 always point to the General\n  ; Purpose RAM (from 0000 - 00ff), while @R2 and @R3 always point to the\n  ; Special Function Register area (from 0100 - 01ff).\n  ;\n  ; During the first pass, memory address two holds the value $80.  Therefore,\n  ; 00000000 is placed into memory address 0180.  We've now cleared the first 8\n  ; pixels on the LCD screen.\n  ;\n  ;        inc 2\n  ;\n  ; We increment the value of memory address 002.  During the first pass, this\n  ; would change it to $81.\n  ;\n  ;        ld 2\n  ;\n  ; Now we put the value of memory address 002 into the accumulator.  Again, in\n  ; the first pass this is $81.\n  ;\n  ;        and #$f\n  ;\n  ; The CPU performs a bitwise AND with the value in the accumulator and $0F.\n  ; During the first pass, we're comparing 10000001 and 00001111; the new value\n  ; is 00000001.\n  ;\n  ;        bne #$c,.cskip\n  ;\n  ; This instruction is a conditional statement (an \"if\").  If the value of the\n  ; accumulator is equal to $0C (12 decimal), goto (branch to) subfunction\n  ; \".cskip\".  We do this to see if the LCD frame buffer address is divisable\n  ; by 12.  Each six bytes (6 * 8 bits) in the LCD Frame Buffer represent one\n  ; line on the LDC screen (48 pixel), and after every two lines there is a\n  ; space of 4 unused bytes.\n  ;\n  ;        ld 2\n  ;        add #4\n  ;        st 2\n  ;\n  ; If we have written two full lines to the the LCD Frame Buffer (of which the\n  ; current write address is represented in memory address 002), then we add 4,\n  ; to skip the unused bytes and set the pointer to the beginning of the next\n  ; line.  During the first pass it isn't, so this part is skipped.\n  ;\n  ; .cskip:\n  ;        ld 2\n  ;        bnz .cloop\n  ;\n  ; This is a check to see if we're finished with the LCD Frame Buffer in\n  ; bank 0 (half of the screen).  If we've reached the end and roll over to 00,\n  ; go back to \".cloop\".\n  ;\n  ;        bp xbnk,0,.cexit\n  ;\n  ; If the Bank Address Register does not equal zero (meaning that we have\n  ; already written to the LCD Frame Buffer in both banks), goto \".cexit\".\n  ;\n  ;        mov #1,xbnk\n  ;        br .cbank\n  ;\n  ; Move 1 into the Bank Address Register (switch to bank 1).  This lets us\n  ; clear the bottom half of the screen.  We then continue with writing to the\n  ; lower half of the screen just like we previously wrote to the upper half\n  ; (because all that's different is that the lower half is in another bank).\n  ;\n  ; .cexit:\n  ;        pop 2\n  ;        pop xbnk\n  ;        pop acc\n  ;        set1 ocr,5\n  ;        ret\n  ;\n  ; This restores the values of memory address 2, the Bank Address Register,\n  ; and the Accumulator.  The clock speed is reset to A1 and the function\n  ; returns to the address following the code that called it.\n  \n  \n  * ------------------------------------------------------\n  *  Set Screen\n  \n  setscr:\n         clr1 ocr,5\n         push acc\n         push xbnk\n         ;\n         push c\n         push 2\n         mov #$80,2\n         ;\n         xor acc\n         st xbnk\n         st c\n  .sloop:\n         ldc\n         st @R2\n         ;\n         inc 2\n         ;\n         ld 2\n         and #$f\n         bne #$c,.sskip\n         ;\n         ld 2\n         add #4\n         st 2\n         ;\n         bnz .sskip\n         ;\n         inc xbnk\n         mov #$80,2\n  .sskip:\n         inc c\n         ld c\n         bne #$c0,.sloop\n         ;\n         pop 2\n         pop c\n         pop xbnk\n         pop acc\n         set1 ocr,5\n         ret\n  \n  \n  ; Explanation:\n  ;\n  ;        clr1 ocr,5\n  ;        push acc\n  ;        push xbnk\n  ;\n  ; Setscr is similar to clrscr.  The C register is used to as a counter for\n  ; the table data (the picture we're going to copy to the LCD screen).\n  ;\n  ;        push c\n  ;        push 2\n  ;        mov #$80,2\n  ;\n  ;        xor acc\n  ;        st xbnk\n  ;        st c\n  ;\n  ; By XORing the accumulator with itself, we are setting it to zero.\n  ;\n  ; .sloop:\n  ;        ldc\n  ;\n  ; LDC creates a 16-bit address by combining the 16-bit address in TRH/TRL\n  ; with the value in the accumulator.  The byte at this address (the beginning\n  ; of our picture data) is then loaded into the accumulator.\n  ;\n  ; In the first pass, ACC contains the value zero, so the value at address\n  ; (TRH/TRL + 0) is loaded.\n  ;\n  ;        st @R2\n  ;\n  ; We then write this data into the LCD Frame Buffer.\n  ;\n  ;        inc 2\n  ;\n  ;        ld 2\n  ;        and #$f\n  ;        bne #$c,.sskip\n  ;\n  ;        ld 2\n  ;        add #4\n  ;        st 2\n  ;\n  ;        bnz .sskip\n  ;\n  ;        inc xbnk\n  ;        mov #$80,2\n  ;\n  ; All of the above is similar to clrscr.\n  ;\n  ; .sskip:\n  ;        inc c\n  ;        ld c\n  ;\n  ; Here we increase C by one, and load the new value into the accumulator.\n  ;\n  ;        bne #$c0,.sloop\n  ;\n  ; If the accumulator has not yet reached hexadecimal value C0 (192 decimal,\n  ; 6 bytes per screenline * 32 lines), we branch back to \".sloop\".  Since the\n  ; accumulator now contains a value that has been increased by one, during this\n  ; pass we will now load the byte from our screen-data that follows the one we\n  ; loaded during our previous pass.\n  ;\n  ;        pop 2\n  ;        pop c\n  ;        pop xbnk\n  ;        pop acc\n  ;        set1 ocr,5\n  ;        ret\n  ;\n  ; Again the previously saved values are restored and the function returns to\n  ; the address following the code that called it.\n  \n  \n  screen_data:\n         ;\n         ; 32 lines with 6 bytes (48 pixel) per line (\"Hello World\" image)\n         ;\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000100,%01001111,%10010000,%00100000,%00111000,%00000000\n         .byte %00000100,%01001000,%00010000,%00100000,%01000100,%00000000\n         .byte %00000111,%11001111,%00010000,%00100000,%01000100,%00000000\n         .byte %00000100,%01001000,%00010000,%00100000,%01000100,%00000000\n         .byte %00000100,%01001111,%10011111,%00111110,%00111000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000100,%01000111,%00011110,%00100000,%01111000,%11100000\n         .byte %00000100,%01001000,%10010001,%00100000,%01000100,%11100000\n         .byte %00000101,%01001000,%10011110,%00100000,%01000100,%01000000\n         .byte %00000101,%01001000,%10010100,%00100000,%01000100,%00000000\n         .byte %00000010,%10000111,%00010010,%00111110,%01111000,%01000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n         .byte %00000000,%00000000,%00000000,%00000000,%00000000,%00000000\n  \n  \n  * ----------------------------------------------------------------------\n  * getkeys - loads Port 3 data into ACC\n  *           also handles Mode-button (QUIT), Dreamcast Connect and Sleep\n  \n  getkeys:\n         bp p7,0,quit            ; Quit, if Dreamcast Connection\n         ld p3                   ; read key status\n         bn acc,6,quit           ; if Mode Key pressed, Quit\n         bn acc,7,sleep          ; if Sleep Key pressed, then Pause\n         ret                     ; otherwise return with pressed key in ACC\n  quit:\n         jmp goodbye             ; Long Jump, in case we are too far away\n                                 ; for a 'normal' branch\n  sleep:\n         set1 pcon,0             ; activate HALT mode (saves power)\n         bn p3,7,sleep           ; wait until Sleep Key is released\n         mov #0,vccr             ; turn off LCD\n         ;\n  sleepmore:\n         set1 pcon,0             ; activate HALT mode (saves power)\n         bp p7,0,quit            ; Docked?\n         bp p3,7,sleepmore       ; no Sleep Key pressed yet\n         mov #$80,vccr           ; turn on LCD again\n         ;\n  waitsleepup:\n         set1 pcon,0             ; activate HALT modus (saves power)\n         bn p3,7,waitsleepup\n         br getkeys              ; continue to wait for keypress\n  \n  \n  * ----------------------------------------------------------------------\n  * End\n  \n  ; Added Code to Skeleton to Show Buttons Pressed:\n  \n  ; font data, each \"character\" takes up 5x5 pixels of space on screen\n  ; represent as 5 * 8 bytes which uses a bit more space, ignore upper 3-bits\n  ; TODO, these are pre-shifted to the location \n  ; since writes have to be 8-bytes in size\n  \n  font_A_data:\n         .byte %00001110\n         .byte %00010001\n         .byte %00011111\n         .byte %00010001\n         .byte %00010001\n  \n  font_B_data:\n         .byte %00111100\n         .byte %00100010\n         .byte %00111100\n         .byte %00100010\n         .byte %00111100\n  \n  font_M_data:\n         .byte %01000100\n         .byte %01101100\n         .byte %01010100\n         .byte %01000100\n         .byte %01000100\n  \n  font_S_data:\n         .byte %01111000\n         .byte %10000000\n         .byte %01110000\n         .byte %00001000\n         .byte %11110000\n  \n  font_UP_data:\n         .byte %00000100\n         .byte %00001110\n         .byte %00011111\n         .byte %00000100\n         .byte %00000100\n  \n  font_DOWN_data:\n         .byte %00001000\n         .byte %00001000\n         .byte %00111110\n         .byte %00011100\n         .byte %00001000\n  \n  font_LEFT_data:\n         .byte %00010000\n         .byte %00110000\n         .byte %01111100\n         .byte %00110000\n         .byte %00010000\n  \n  font_RIGHT_data:\n         .byte %00100000\n         .byte %00110000\n         .byte %11111000\n         .byte %00110000\n         .byte %00100000\n  \n  font_EMPTY_data:\n         .byte %00000000\n         .byte %00000000\n         .byte %00000000\n         .byte %00000000\n         .byte %00000000      \n  \n  ; B contains offset in display RAM to write char to in XBK1\n  ; TRL, TRH contains pointer to start of character data to write at offset\n  write_char:\n         push acc\n         push psw\n         push b\n         push c\n         push xbnk\n         push R2\n       \n         mov #1,xbnk ; Hardcoded xbank to 1\n         mov #$00, c ; Loop counter set to 0\n         mov #$80, acc \n         add b\n         st R2; R2 contains ptr to display_ram + char_start_offset\n  \n  .write_display_loop:\n         ld c  ; Mov contents of C register into ACC\n         ldc   ; Load next byte of font char into ACC\n         st @R2 ; Write into display RAM\n  \n         ; Check if finished\n         ; if c was incremented to 4 last cycle, then we've \n         ; output all 5 lines of the character\n         bp c, 2, .end_write_display_loop\n  \n         ; Increase loop counter\n         ; and display RAM pointer to next line\n         inc c\n         ld R2\n         ; Since last\n         ; 0x1XC -> 0x1XF is unused\n         ; Need to add 6 bytes if cur line odd, else 10\n         ; if cur display addr is 0x1X6 -> 0x1XB then we're on an even line\n         ; check if lower nibble is < 6 and skip adding extra offset to next line if so\n         clr1 psw, 7 ; first clear previous carry flag state\n         and #$f\n         sub #6\n         ld R2\n         bp psw, 7, .extra_line_bytes_skip\n  \n         add #4\n  .extra_line_bytes_skip:\n         add #6\n         st R2\n         br .write_display_loop\n  \n  .end_write_display_loop:\n         pop R2\n         pop xbnk\n         pop c \n         pop b \n         pop psw\n         pop acc\n         ret \n  \n  \n  show_keys_pressed:\n         push trl\n         push trh\n         push b\n         push acc\n  \n         ld p3\n         ;bn acc,4,.keypress      ; branch if button A is pressed\n  ; show A pressed/not-pressed\n  \n         bn acc,4,.A_pressed\n  \n         mov #<font_EMPTY_data,trl\n         mov #>font_EMPTY_data,trh\n         br .end_selected_char_A_data\n  \n  .A_pressed:\n         mov #<font_A_data,trl\n         mov #>font_A_data,trh\n  \n  .end_selected_char_A_data:\n         ; 'A' key shown at position X:11 Y:18 -> X:11 Y:2\n         ; since in XBNK 2 this becomes X:11 Y:2\n         ; Which is offset 0x11 in XRAM\n         mov #$11, b\n         call write_char\n  \n  ; show B pressed/not-pressed\n         bn acc,5,.B_pressed\n  \n         mov #<font_EMPTY_data,trl\n         mov #>font_EMPTY_data,trh\n         br .end_selected_char_B_data\n  \n  .B_pressed:\n         mov #<font_B_data,trl\n         mov #>font_B_data,trh\n  \n  .end_selected_char_B_data:\n         ; 'B' key shown at position X:18 Y:18 -> X:11 Y:2\n         ; since in XBNK 2 this becomes X:18 Y:2\n         ; Which is offset 0x12 in XRAM\n         mov #$12, b\n         call write_char\n  \n  ; show Mode-Key pressed/not-pressed\n         bn acc,6,.M_pressed\n  \n         mov #<font_EMPTY_data,trl\n         mov #>font_EMPTY_data,trh\n         br .end_selected_char_M_data\n  \n  .M_pressed:\n         mov #<font_M_data,trl\n         mov #>font_M_data,trh\n  .end_selected_char_M_data:\n         ; 'M' key shown at position X:25 Y:18 -> X:11 Y:2\n         ; since in XBNK 2 this becomes X:25 Y:2\n         ; Which is offset 0x13 in XRAM\n         mov #$13, b\n         call write_char\n  \n  ; show Select-Key pressed/not-pressed\n         bn acc,7,.S_pressed\n  \n         mov #<font_EMPTY_data,trl\n         mov #>font_EMPTY_data,trh\n         br .end_selected_char_S_data\n  \n  .S_pressed:\n         mov #<font_S_data,trl\n         mov #>font_S_data,trh\n  .end_selected_char_S_data:\n         ; 'S' key shown at position X:32 Y:18 -> X:11 Y:2\n         ; since in XBNK 2 this becomes X:32 Y:2\n         ; Which is offset 0x14 in XRAM\n         mov #$14, b\n         call write_char\n  \n  ; show UP-Key pressed/not-pressed\n         bn acc,0,.UP_pressed\n  \n         mov #<font_EMPTY_data,trl\n         mov #>font_EMPTY_data,trh\n         br .end_selected_char_UP_data\n  .UP_pressed:\n         mov #<font_UP_data,trl\n         mov #>font_UP_data,trh\n  .end_selected_char_UP_data:\n         mov #$47, b\n         call write_char\n  \n  ; show DOWN-Key pressed/not-pressed\n         bn acc,1,.DOWN_pressed\n  \n         mov #<font_EMPTY_data,trl\n         mov #>font_EMPTY_data,trh\n         br .end_selected_char_DOWN_data\n  .DOWN_pressed:\n         mov #<font_DOWN_data,trl\n         mov #>font_DOWN_data,trh\n  .end_selected_char_DOWN_data:\n         mov #$48, b\n         call write_char\n  \n  ; show LEFT-Key pressed/not-pressed\n         bn acc,3,.LEFT_pressed\n  \n         mov #<font_EMPTY_data,trl\n         mov #>font_EMPTY_data,trh\n         br .end_selected_char_LEFT_data\n  .LEFT_pressed:\n         mov #<font_LEFT_data,trl\n         mov #>font_LEFT_data,trh\n  .end_selected_char_LEFT_data:\n         mov #$49, b\n         call write_char\n  \n  ; show RIGHT-Key pressed/not-pressed\n         bn acc,2,.RIGHT_pressed\n  \n         mov #<font_EMPTY_data,trl\n         mov #>font_EMPTY_data,trh\n         br .end_selected_char_RIGHT_data\n  .RIGHT_pressed:\n         mov #<font_RIGHT_data,trl\n         mov #>font_RIGHT_data,trh\n  .end_selected_char_RIGHT_data:\n         mov #$4A, b\n         call write_char\n  \n         pop acc\n         pop b \n         pop trh\n         pop trl \n         ret\n  \n  ;\n  * -------\n  * Animation \n  \n  ;                *\n  ;        *      ***      * \n  ; * ->  *** -> ***** -> *** -> *\n  ;        *      ***      *\n  ;                *\n  \n  anim_s0l_data:\n         .byte %00000000\n         .byte %00000000\n         .byte %00000100\n         .byte %00000000\n         .byte %00000000\n  \n  anim_s1l_data:\n         .byte %00000000\n         .byte %00000100\n         .byte %00001110\n         .byte %00000100\n         .byte %00000000\n  \n  anim_s2l_data:\n         .byte %00000100\n         .byte %00001110\n         .byte %00011111\n         .byte %00001110\n         .byte %00000100\n  \n  anim_s0r_data:\n         .byte %00000000\n         .byte %00000000\n         .byte %00100000\n         .byte %00000000\n         .byte %00000000\n  \n  anim_s1r_data:\n         .byte %00000000\n         .byte %00100000\n         .byte %01110000\n         .byte %00100000\n         .byte %00000000\n  \n  anim_s2r_data:\n         .byte %00100000\n         .byte %01110000\n         .byte %11111000\n         .byte %01110000\n         .byte %00100000\n  \n  ; Custom testing of interrupts\n  ; Want to have a 3 frame \"animation\"\n  ; occur on every t0l overflow\n  ; 3 distinct bit-images, with 4 possible states/frames\n  draw_animation_int:\n         mov #$00, t0con ; Reset the timer until we're done\n         push acc\n         push psw\n         push b \n         push c \n         push trl \n         push trh\n  \n         ; Draw animation every (nth interrupt, store count in $11)\n         ld $11\n         sub #30\n         inc $11\n         bp psw, 7, .done_anim\n         st $11\n  \n         ld $10 ; Store current animation state count in RAM 0x10 (hopefully nothing else uses this >.>)\n  \n         \n         bp acc, 0, .anim_state_1_or_3\n  .anim_state_0_or_2:\n         bp acc, 1, .anim_state_2\n  .anim_state_0:\n         mov #<anim_s0l_data,trl\n         mov #>anim_s0l_data,trh\n         mov #$20, b\n         call write_char\n         mov #<anim_s0r_data,trl\n         mov #>anim_s0r_data,trh\n         mov #$25, b \n         call write_char\n         inc $10\n         br .done_anim\n  .anim_state_2:\n         mov #<anim_s2l_data,trl\n         mov #>anim_s2l_data,trh\n         mov #$20, b\n         call write_char\n         mov #<anim_s2r_data,trl\n         mov #>anim_s2r_data,trh\n         mov #$25, b \n             call write_char\n         inc $10\n         br .done_anim\n  \n  .anim_state_1_or_3:\n         ; State 1 or 3 (are the same for this animation)\n         mov #<anim_s1l_data,trl\n         mov #>anim_s1l_data,trh\n         mov #$20, b\n         call write_char\n         mov #<anim_s1r_data,trl\n         mov #>anim_s1r_data,trh\n         mov #$25, b \n         call write_char\n         inc $10\n         not1 $10, 2 ; Reset to state 0 if moved to state 4 \n  \n  .done_anim:\n         pop trh \n         pop trl\n         pop c \n         pop b\n         pop psw\n         pop acc \n         mov #$41, t0con ; Re-enable the timer\n         reti\n  .cnop   0,$200          ; pad to an even number of blocks\n    "),document.getElementById("run_button").addEventListener("click",(function(){console.log("Clicked"),u.then(e=>e.start(f.toString()))})),console.log(d);var p=document.getElementById("canvas").getContext("2d");!function(){let e=new Image;e.src="./vmu_sprite.png",e.onload=function(){p.imageSmoothingEnabled=!1,p.drawImage(e,0,0,8*e.width,8*e.height)}}()}]);